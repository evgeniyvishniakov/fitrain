<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Shared\User;
use App\Models\Trainer\AthleteMeasurement;
use Illuminate\Support\Facades\Hash;
use Carbon\Carbon;

class AthleteProgressSeeder extends Seeder
{
    public function run()
    {
        // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
        $trainer = User::whereHas('roles', function($query) {
            $query->where('name', 'trainer');
        })->first();

        if (!$trainer) {
            $this->command->error('–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ UserSeeder.');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º 5 —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
        $athletes = [
            [
                'name' => '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
                'email' => 'anna.sidorova@fitrain.com',
                'gender' => 'female',
                'birth_date' => Carbon::now()->subYears(28)->subMonths(3),
                'sport_level' => 'intermediate',
                'goals' => ['weight_loss', 'muscle_tone', 'endurance'],
                'current_weight' => 72.0,
                'current_height' => 165.0,
                'health_restrictions' => ['knee_injury_2022'],
                'is_active' => true,
                'profile_type' => 'weight_loss' // –¢–∏–ø –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            ],
            [
                'name' => '–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤',
                'email' => 'mikhail.kozlov@fitrain.com',
                'gender' => 'male',
                'birth_date' => Carbon::now()->subYears(32)->subMonths(7),
                'sport_level' => 'beginner',
                'goals' => ['muscle_gain', 'strength'],
                'current_weight' => 78.0,
                'current_height' => 178.0,
                'health_restrictions' => [],
                'is_active' => true,
                'profile_type' => 'muscle_gain'
            ],
            [
                'name' => '–ï–ª–µ–Ω–∞ –í–æ–ª–∫–æ–≤–∞',
                'email' => 'elena.volkova@fitrain.com',
                'gender' => 'female',
                'birth_date' => Carbon::now()->subYears(24)->subMonths(2),
                'sport_level' => 'advanced',
                'goals' => ['competition_prep', 'strength', 'endurance'],
                'current_weight' => 58.0,
                'current_height' => 162.0,
                'health_restrictions' => [],
                'is_active' => true,
                'profile_type' => 'competition'
            ],
            [
                'name' => '–î–º–∏—Ç—Ä–∏–π –°–æ–∫–æ–ª–æ–≤',
                'email' => 'dmitry.sokolov@fitrain.com',
                'gender' => 'male',
                'birth_date' => Carbon::now()->subYears(35)->subMonths(5),
                'sport_level' => 'intermediate',
                'goals' => ['weight_loss', 'health', 'endurance'],
                'current_weight' => 95.0,
                'current_height' => 182.0,
                'health_restrictions' => ['diabetes_type_2'],
                'is_active' => true,
                'profile_type' => 'health_improvement'
            ],
            [
                'name' => '–û–ª—å–≥–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
                'email' => 'olga.morozova@fitrain.com',
                'gender' => 'female',
                'birth_date' => Carbon::now()->subYears(29)->subMonths(8),
                'sport_level' => 'beginner',
                'goals' => ['weight_loss', 'flexibility', 'general_fitness'],
                'current_weight' => 68.0,
                'current_height' => 168.0,
                'health_restrictions' => [],
                'is_active' => true,
                'profile_type' => 'general_fitness'
            ]
        ];

        $createdAthletes = [];

        foreach ($athletes as $athleteData) {
            $athlete = User::create([
                'name' => $athleteData['name'],
                'email' => $athleteData['email'],
                'password' => Hash::make('password'),
                'phone' => '+7 (999) ' . rand(100, 999) . '-' . rand(10, 99) . '-' . rand(10, 99),
                'trainer_id' => $trainer->id,
                'birth_date' => $athleteData['birth_date'],
                'gender' => $athleteData['gender'],
                'sport_level' => $athleteData['sport_level'],
                'goals' => $athleteData['goals'],
                'current_weight' => $athleteData['current_weight'],
                'current_height' => $athleteData['current_height'],
                'health_restrictions' => $athleteData['health_restrictions'],
                'is_active' => $athleteData['is_active'],
                'last_medical_checkup' => Carbon::now()->subMonths(rand(1, 6)),
                'profile_modules' => ['measurements', 'progress', 'nutrition', 'workouts']
            ]);

            $athlete->assignRole('athlete');
            $createdAthletes[] = [
                'athlete' => $athlete,
                'profile_type' => $athleteData['profile_type']
            ];

            $this->command->info("–°–æ–∑–¥–∞–Ω —Å–ø–æ—Ä—Ç—Å–º–µ–Ω: {$athlete->name}");
        }

        // –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞ –∑–∞ –≥–æ–¥ (12 –º–µ—Å—è—Ü–µ–≤)
        foreach ($createdAthletes as $athleteData) {
            $athlete = $athleteData['athlete'];
            $profileType = $athleteData['profile_type'];

            $this->command->info("–°–æ–∑–¥–∞—é –∏–∑–º–µ—Ä–µ–Ω–∏—è –¥–ª—è {$athlete->name}...");

            // –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            $currentWeight = $athlete->current_weight;
            $currentHeight = $athlete->current_height;
            $currentBodyFat = $this->getInitialBodyFat($athlete->gender, $profileType);
            $currentMuscleMass = $this->getInitialMuscleMass($athlete->gender, $currentWeight, $currentBodyFat);

            // –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è –∑–∞ –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü
            for ($month = 0; $month < 12; $month++) {
                $measurementDate = Carbon::now()->subMonths(11 - $month)->startOfMonth();

                // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è
                $progress = $this->calculateProgress($profileType, $month, $athlete->gender);

                // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
                $currentWeight += $progress['weight_change'];
                $currentBodyFat += $progress['body_fat_change'];
                $currentMuscleMass += $progress['muscle_mass_change'];

                // –°–æ–∑–¥–∞–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏–µ
                AthleteMeasurement::create([
                    'athlete_id' => $athlete->id,
                    'measurement_date' => $measurementDate,
                    'weight' => round($currentWeight, 1),
                    'height' => $currentHeight, // –†–æ—Å—Ç –æ–±—ã—á–Ω–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è —É –≤–∑—Ä–æ—Å–ª—ã—Ö
                    'body_fat_percentage' => round(max(5, min(40, $currentBodyFat)), 1),
                    'muscle_mass' => round(max(20, $currentMuscleMass), 1),
                    'water_percentage' => round(50 + rand(-5, 5), 1),
                    'chest' => round($this->calculateChest($athlete->gender, $currentWeight, $currentMuscleMass), 1),
                    'waist' => round($this->calculateWaist($athlete->gender, $currentWeight, $currentBodyFat), 1),
                    'hips' => round($this->calculateHips($athlete->gender, $currentWeight), 1),
                    'bicep' => round($this->calculateBicep($athlete->gender, $currentMuscleMass), 1),
                    'thigh' => round($this->calculateThigh($athlete->gender, $currentWeight), 1),
                    'neck' => round($this->calculateNeck($athlete->gender, $currentWeight), 1),
                    'resting_heart_rate' => round(65 + rand(-10, 10), 0),
                    'blood_pressure_systolic' => round(120 + rand(-15, 15), 0),
                    'blood_pressure_diastolic' => round(80 + rand(-10, 10), 0),
                    'notes' => $this->getProgressNotes($profileType, $month),
                    'measured_by' => 'trainer'
                ]);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–∞
            $athlete->update([
                'current_weight' => $currentWeight,
                'current_height' => $currentHeight
            ]);
        }

        $this->command->info('‚úÖ –°–æ–∑–¥–∞–Ω–æ 5 —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤ —Å –≥–æ–¥–æ–≤—ã–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏!');
        $this->command->info('üìä –ö–∞–∂–¥—ã–π —Å–ø–æ—Ä—Ç—Å–º–µ–Ω –∏–º–µ–µ—Ç 12 –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º');
    }

    private function getInitialBodyFat($gender, $profileType)
    {
        $baseBodyFat = $gender === 'male' ? 18 : 25;
        
        switch ($profileType) {
            case 'weight_loss':
                return $baseBodyFat + rand(3, 8);
            case 'muscle_gain':
                return $baseBodyFat - rand(2, 5);
            case 'competition':
                return $baseBodyFat - rand(5, 10);
            case 'health_improvement':
                return $baseBodyFat + rand(5, 12);
            default:
                return $baseBodyFat + rand(-2, 4);
        }
    }

    private function getInitialMuscleMass($gender, $weight, $bodyFatPercentage)
    {
        $leanMass = $weight * (1 - $bodyFatPercentage / 100);
        return $leanMass * ($gender === 'male' ? 0.9 : 0.85); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –¥–æ–ª—è –º—ã—à—Ü –æ—Ç –±–µ–∑–∂–∏—Ä–æ–≤–æ–π –º–∞—Å—Å—ã
    }

    private function calculateProgress($profileType, $month, $gender)
    {
        $progress = [
            'weight_change' => 0,
            'body_fat_change' => 0,
            'muscle_mass_change' => 0
        ];

        switch ($profileType) {
            case 'weight_loss':
                // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –ø–æ—Ç–µ—Ä—è –≤–µ—Å–∞
                $progress['weight_change'] = -0.3 - (rand(0, 10) / 100); // 0.3-0.4 –∫–≥ –≤ –º–µ—Å—è—Ü
                $progress['body_fat_change'] = -0.4 - (rand(0, 20) / 100); // —Å–Ω–∏–∂–µ–Ω–∏–µ –∂–∏—Ä–∞
                $progress['muscle_mass_change'] = rand(-5, 10) / 100; // –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º—ã—à—Ü
                break;

            case 'muscle_gain':
                // –ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã
                $progress['weight_change'] = 0.2 + (rand(0, 15) / 100); // 0.2-0.35 –∫–≥ –≤ –º–µ—Å—è—Ü
                $progress['body_fat_change'] = rand(-5, 15) / 100; // –Ω–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∂–∏—Ä–∞
                $progress['muscle_mass_change'] = 0.15 + (rand(0, 10) / 100); // —Ä–æ—Å—Ç –º—ã—à—Ü
                break;

            case 'competition':
                // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º
                if ($month < 6) {
                    $progress['weight_change'] = -0.4 - (rand(0, 15) / 100);
                    $progress['body_fat_change'] = -0.5 - (rand(0, 20) / 100);
                    $progress['muscle_mass_change'] = rand(-10, 15) / 100;
                } else {
                    $progress['weight_change'] = -0.2 - (rand(0, 10) / 100);
                    $progress['body_fat_change'] = -0.3 - (rand(0, 15) / 100);
                    $progress['muscle_mass_change'] = rand(-5, 10) / 100;
                }
                break;

            case 'health_improvement':
                // –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
                $progress['weight_change'] = -0.5 - (rand(0, 20) / 100); // –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –ø–æ—Ç–µ—Ä—è –≤–µ—Å–∞
                $progress['body_fat_change'] = -0.6 - (rand(0, 25) / 100);
                $progress['muscle_mass_change'] = rand(-10, 20) / 100;
                break;

            case 'general_fitness':
                // –û–±—â–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞
                $progress['weight_change'] = -0.2 + (rand(-10, 10) / 100); // —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–µ—Å
                $progress['body_fat_change'] = -0.2 - (rand(0, 15) / 100);
                $progress['muscle_mass_change'] = rand(0, 15) / 100;
                break;
        }

        return $progress;
    }

    private function calculateChest($gender, $weight, $muscleMass)
    {
        $base = $gender === 'male' ? 95 : 85;
        $weightFactor = ($weight - 70) * 0.3;
        $muscleFactor = ($muscleMass - 35) * 0.2;
        return $base + $weightFactor + $muscleFactor;
    }

    private function calculateWaist($gender, $weight, $bodyFat)
    {
        $base = $gender === 'male' ? 85 : 75;
        $weightFactor = ($weight - 70) * 0.4;
        $fatFactor = ($bodyFat - 20) * 0.5;
        return $base + $weightFactor + $fatFactor;
    }

    private function calculateHips($gender, $weight)
    {
        $base = $gender === 'male' ? 95 : 100;
        $weightFactor = ($weight - 70) * 0.3;
        return $base + $weightFactor;
    }

    private function calculateBicep($gender, $muscleMass)
    {
        $base = $gender === 'male' ? 32 : 26;
        $muscleFactor = ($muscleMass - 35) * 0.15;
        return $base + $muscleFactor;
    }

    private function calculateThigh($gender, $weight)
    {
        $base = $gender === 'male' ? 55 : 58;
        $weightFactor = ($weight - 70) * 0.2;
        return $base + $weightFactor;
    }

    private function calculateNeck($gender, $weight)
    {
        $base = $gender === 'male' ? 38 : 32;
        $weightFactor = ($weight - 70) * 0.1;
        return $base + $weightFactor;
    }

    private function getProgressNotes($profileType, $month)
    {
        $notes = [
            'weight_loss' => [
                '–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–Ω–∏–∂–µ–Ω–∏–∏ –≤–µ—Å–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –ø–∏—Ç–∞–Ω–∏–µ–º.',
                '–í–µ—Å —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ. –î–æ–±–∞–≤–∏–ª–∏ –∫–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.',
                '–•–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –ø–∏—Ç–∞–Ω–∏—è.',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–º–µ–¥–ª–∏–ª—Å—è, –º–µ–Ω—è–µ–º –ø–æ–¥—Ö–æ–¥ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º.',
                '–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü! –í–µ—Å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–Ω–∏–∂–∞—Ç—å—Å—è.',
                '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –î–æ–±–∞–≤–∏–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –º—ã—à–µ—á–Ω—ã–º —Ç–æ–Ω—É—Å–æ–º.',
                '–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –ë–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–∏.',
                '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è. –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.',
                '–ü–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏! –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏.',
                '–¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
                '–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –≥–æ–¥! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É.'
            ],
            'muscle_gain' => [
                '–ù–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã. –§–æ–∫—É—Å –Ω–∞ —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–∏–ª–µ –≤–∏–¥–µ–Ω. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å–∞.',
                '–ú—ã—à—Ü—ã —Ä–∞—Å—Ç—É—Ç! –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–∏—Ç–∞–Ω–∏–µ.',
                '–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±—ä–µ–º–∞—Ö. –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.',
                '–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –º—ã—à—Ü. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–∞–ª–æ—Ä–∏–∏.',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–∏–ª–µ –∏ –º–∞—Å—Å–µ. –ú–µ–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É.',
                '–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π.',
                '–ú—ã—à—Ü—ã —Ä–∞—Å—Ç—É—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ. –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–ª—è—Ü–∏—é.',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–º–µ–¥–ª–∏–ª—Å—è. –ú–µ–Ω—è–µ–º –ø–æ–¥—Ö–æ–¥.',
                '–û—Ç–ª–∏—á–Ω—ã–π –º–µ—Å—è—Ü! –ú–∞—Å—Å–∞ —Ä–∞—Å—Ç–µ—Ç.',
                '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è.',
                '–û—Ç–ª–∏—á–Ω—ã–π –≥–æ–¥! –¶–µ–ª—å –Ω–∞–±–æ—Ä–∞ –º–∞—Å—Å—ã –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞.'
            ],
            'competition' => [
                '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è–º. –ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–∞–∑–∞.',
                '–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ñ–æ—Ä–º–æ–π.',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–æ—Ä–º–µ. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–∏—Ç–∞–Ω–∏–µ.',
                '–§–æ—Ä–º–∞ —É–ª—É—á—à–∞–µ—Ç—Å—è. –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä–¥–∏–æ.',
                '–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ë–ª–∏–∑–∫–æ –∫ –ø–∏–∫—É —Ñ–æ—Ä–º—ã.',
                '–ü–∏–∫–æ–≤–∞—è —Ñ–æ—Ä–º–∞. –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.',
                '–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã. –ì–æ—Ç–æ–≤–∏–º—Å—è –∫ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—é.',
                '–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞.',
                '–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –æ—Ç–ª–∏—á–Ω–æ! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ.',
                '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥. –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª.',
                '–ù–æ–≤—ã–π —Ü–∏–∫–ª –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–ª–∞–±—ã–º–∏ –º–µ—Å—Ç–∞–º–∏.',
                '–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –Ω–æ–≤–æ–º—É —Å–µ–∑–æ–Ω—É. –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ü–µ–ª–∏.'
            ],
            'health_improvement' => [
                '–ù–∞—á–∞–ª–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è. –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ä—Ç.',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å—é.',
                '–í–µ—Å —Å–Ω–∏–∂–∞–µ—Ç—Å—è —Å—Ç–∞–±–∏–ª—å–Ω–æ. –£–ª—É—á—à–∞–µ—Ç—Å—è –∑–¥–æ—Ä–æ–≤—å–µ.',
                '–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ —É–ª—É—á—à–∞–µ—Ç—Å—è.',
                '–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å. –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–∏–ª–æ–π.',
                '–û—Ç–ª–∏—á–Ω–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É.',
                '–¶–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
                '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ü–µ–ª–∏.',
                '–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –ó–¥–æ—Ä–æ–≤—å–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∏–ª–æ—Å—å.',
                '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.',
                '–ì–æ–¥ –æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
            ],
            'general_fitness' => [
                '–ù–∞—á–∞–ª–æ –æ–±—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –±–∞–∑–æ–π.',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±—â–µ–π —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ.',
                '–£–ª—É—á—à–∞–µ—Ç—Å—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –∏ —Å–∏–ª–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.',
                '–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö.',
                '–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã! –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ.',
                '–ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –∏ –≥–∏–±–∫–æ—Å—Ç–∏.',
                '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–ª–∞–±–æ—Å—Ç—è–º–∏.',
                '–û—Ç–ª–∏—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å! –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É–ª—É—á—à–∏–ª–∏—Å—å.',
                '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ–æ—Ä–º—É. –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Ü–µ–ª–∏.',
                '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. –ì–æ—Ç–æ–≤—ã –∫ –Ω–æ–≤—ã–º –≤—ã–∑–æ–≤–∞–º.',
                '–û—Ç–ª–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞! –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–µ.',
                '–ì–æ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!'
            ]
        ];

        return $notes[$profileType][$month] ?? '–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.';
    }
}
